引用计数机制：
        python内部使用引用计数，来保持追踪内存中的对象，Python内部记录了对象有多少个引用，即引用计数，当对象被创建时就创建了一个引用计数，当对象不再需要时，这个对象的引用计数为0时，它被垃圾回收。
数据类型：
        整数，浮点数，字符串，布尔值，None，list，tuple，dict，set
dict和list比较：
list [1,2,3]  dict {'Michael': 95, 'Bob': 75, 'Tracy': 85}  set {1, 2, 3}
        和list比较，dict有以下几个特点：
        查找和插入的速度极快，不会随着key的增加而变慢；
        需要占用大量的内存，内存浪费多。
        而list相反：
        查找和插入的时间随着元素的增加而增加；
        占用空间小，浪费内存很少。
        所以，dict是用空间来换取时间的一种方法。
Set:
        set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。
迭代：
        给定一个list或tuple，用for循环来遍历它，称为迭代。

列表生成式：
        用来创建list的生成式。例如： [x * x for x in range(1,11)]
生成器：
        列表元素通过算法推算出来，变循环，边计算，generator。
        例如： g = (x * x for x in range(1,11))
              def fib(max):
                n, a, b = 0, 0, 1
                while n < max:
                    yield b
                    a, b = b, a+b
                    n = n + 1
                return "done"
生成器generator和普通函数的区别：
        普通函数顺序执行，遇到return返回。generator调用next()执行，遇到yield返回，再次执行从上次返回的yield处继续执行。

迭代器：
        可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator
map(f,L):
        map将传入的函数依次作用于序列的每一个元素，并将结果返回作为新的Iterator

reduce(f,[x1,x2,x3,x4]):
        reduce把结果继续和序列的下一个元素做累积计算。
filter(f,L):
        filter和map类似，也接受一个参数依次作用于每一个序列。和map不同的是，filter将传入的函数依次作用于每一个元素，并根据返回结果是True还是False决定是保留还是丢弃该元素。
匿名函数：
        lambda
装饰器：
        在代码执行期间动态的增加功能的方式成为装饰器。
        装饰器原理:将源函数当作参数传入一个新函数中，新函数返回一个wraps函数，warps函数在源函数的基础上添加了一些功能而已
作用域：
        L(local)：局部作用域
        E(endosing):嵌套作用域
        G(global)：全局作用域
        B(built-in)：内置作用域
使用__slots__:
        但是，如果我们想要限制实例的属性怎么办？比如，只允许对Student实例添加name和age属性。用__slots__要注意，__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的
@property:
        Python内置的@property装饰器就是负责把一个方法变成属性调用的.@property广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。
MixIn:
        由于Python允许使用多重继承，因此，MixIn就是一种常见的设计。
__str__(self):
        在python中方法名如果是__xxxx__()的，那么就有特殊的功能，因此叫做“魔法”方法
        当使用print输出对象的时候，只要自己定义了__str__(self)方法，那么就会打印从在这个方法中return的数据
        __str__方法需要返回一个字符串，当做这个对象的描写
super() :
        函数是用于调用父类(超类)的一个方法。

IO操作需要捕获异常：
        由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try ... finally来实现
读取文件read():
        如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便